{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#the-website-is-in-progress","title":"[The website is in progress]","text":"<p>Research writing is increasingly a team effort; often multiple people contribute to different manuscript parts. This follows corrections, additions and revisions at different stages. So, a version control system like <code>git</code> could simplify the process at many levels.</p> <p>This documentation aims to provide a brief yet complete account of integrating LaTex with Git. In addition, when the project is integrated with github, it provides seamless collaboration and cloud-syncing.</p>"},{"location":"#outline","title":"Outline","text":"<p>There are three parts to the documentation. Part one focuses on the introduction, installation and configuration of necessary packages. The second part focuses on preparing a manuscript with LaTeX. It introduces the preamble, sections and other options in detail. The final part discusses some of advanced options like branching and using dedicated editors like VS Code or web based solutions.</p>"},{"location":"#audience","title":"Audience","text":"<ul> <li>Unless you want ensure the necessity of LaTeX and Git, you can safely skip the introduction part.</li> <li>If you're familiar with LaTeX installation or already using it, you can skip the installation part too. You may refer only the installation of <code>git</code> and <code>github-cli</code>.</li> <li>Also, this guide is aimed for those who start learning LaTeX. If you're already using LaTeX, there is nothing new for you to learn from the manuscript preparation part. You may refer only the <code>git</code> part, from the corresponding sections.</li> </ul>"},{"location":"#recommended-usage","title":"Recommended Usage","text":"<ul> <li>It is better use this guide as a tutorial</li> <li>Read along with experimenting the things</li> <li>Please let me know, if you struck at some point or wish to provide me a feedback.</li> </ul>"},{"location":"01_why-latex/","title":"Why LaTeX? And, what are Git and Github?","text":""},{"location":"01_why-latex/#why-latex","title":"Why LaTeX?","text":"<p>LaTeX is a text-processing software. You might have used Word or a similar kind of package already. In that, you type the text and format the manuscript by yourself. Such editors are called What You See Is What You Get (WYSIWYG). Instead, in LaTeX, you often tell the compiler how you wish to see the document and give your marked text as input. The software then compiles it and gives you the final output, often as a PDF. LaTeX wiki</p> <p>Such a process may seem complicated. However, once you set up your template and know how to mark up things, using LaTeX is very convenient. Such setup is very helpful when you handle large documents like a thesis. Further, plain text is advantageous for tracking changes. Though it is possible to implement version control in WYSIWYG editors, plain texts like LaTeX files occupy less space and are easy to track the changes.</p> <p>In addition, managing and compiling references is much easier in LaTeX than in word processors. For style, just changing the name is often enough and handy when you switch between journals.</p>"},{"location":"01_why-latex/#what-is-git","title":"What is Git?","text":"<p>Git is a version control system. It keeps track of the changes you make in text files. Such a system is crucial for dealing with codes and often used by IT professionals. A detailed account of what git is and how it can be used is found in this link. When implemented in a LaTeX document, git allows, multiple people can work on the same document without distracting others' thoughts and flow. Further, you can track back to any changes and can switch between the branches and versions (we will see this in-detail later).</p>"},{"location":"01_why-latex/#what-is-github","title":"What is Github?","text":"<p>GitHub is a (now) Microsoft-backed company that allows developers to create, store, manage, and distribute their codes. It is like a user interface with cloud-syncing option for git. You can store any number of private or public repositories in GitHub. This feature allows users to create private repositories and share the code with only certain people. Such private repos are particularly suitable for collaborative manuscript writing. There are other options like bitbucket or AWS EC2 Instances and if you can, it is possible to build your own git server.</p>"},{"location":"02_installation/","title":"Installation","text":"<p>Most often people ditch LaTeX for difficulty in debugging the errors. And, the errors are primarily arise either from a missing style file or from the usage of special characters. We will discuss later in this documentation about the usage of special characters like <code>\\</code> and <code>$</code> in LaTeX. However, my personal choice to avoid the first error is to install the complete package.</p>"},{"location":"02_installation/#acquiring-an-iso-file","title":"Acquiring an ISO file","text":"<p>The complete installation can be done by downloading the <code>texlive</code> ISO file from Tex Users Group (TUG) site. It is big about 3-4 GB, would take some time to download and install. However, it is worth to wait the time.</p> <p>Once downloaded, in linux, right-click the file and mount as a directory. In latest windows (10 &amp; 11) double click the file should mount the file as virtual drive. For older windows, extra software like wincdemu is required to mount the file as drive.</p>"},{"location":"02_installation/#installing-the-package","title":"Installing the package","text":"<p>In linux, open terminal in the texlive directory and issue the command <code>./install-tl</code>. For windows double click the <code>install-tl-windows.bat</code> and this should open up the installation window.</p> <p>Usually the default settings are enough. However, please make sure to create symlinks so that the package can be accessed system-wide.</p> <p>[How this can be done?]</p> <p>Another, optional tweak is to de-select unwanted language packages. This should save considerable space.</p> <p>After this, press <code>y</code> to continue the installation and wait for sometime to complete the process. Once finished, open the terminal (or powershell) and then type <code>pdflatex --version</code>. If you got something like this, ensures the proper installation of texlive package in your system.</p> <pre><code>pdfTeX 3.141592653-2.6-1.40.25 (TeX Live 2023)\nkpathsea version 6.3.5\nCopyright 2023 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.39; using libpng 1.6.39\nCompiled with zlib 1.2.13; using zlib 1.2.13\nCompiled with xpdf version 4.04\n</code></pre>"},{"location":"03_editor/","title":"Editor","text":"<p>If you're installing a windows version, by default you got a MikTex editor. In Linux, you can combine default editors like gedit and terminal to write and compile the documents. There are dedicated LaTeX editors like Kile is available. However, I would recommend a general purpose editor Visual Studio (VS) Code, mainly because, you can easily integrate with Github as well as can enjoy the additional capabilities with its extensions. Summarizing below the minimal procedure and recommended add-ons for VS code.</p>"},{"location":"03_editor/#setting-up","title":"Setting-up","text":"<ul> <li>In windows, VS code can either install from the Microsoft store or by directly downloading the executable from here.</li> <li>For Linux, if you're using Debian or RedHat based distribution, you can download the binaries from the same link above. Alternatively, if you use Flatpak or Snap packages, you can download the corresponding files. For Arch, AUR repositories are also available.</li> <li>In addition, if you do not wish to use the enterprise backed version, there is an open source version, in the name VS Codium. However, you can not use the default settings sync options. Read more about and possible issues here.</li> </ul>"},{"location":"03_editor/#using-vs-code","title":"Using VS-Code","text":"<p>VS Code has three major interfaces. The left panel contains the shortcuts to the extensions along with file browser. The extension manager is also available here. The right panel is divided into two parts, editor and compiler. Often the compiler is hidden and you can toggle it with the keyboard shortcut Ctrl+~</p>"},{"location":"03_editor/#list-of-recommended-extensions","title":"List of recommended extensions","text":"<ol> <li>Bookmarks</li> <li>Code Spell Checker</li> <li>Git Graph</li> <li>Github repositories</li> <li>Latex language support</li> <li>Path Intellisense</li> <li>Project Manager</li> <li>VSCode-PDF</li> </ol> <p>Here I recommend the simple Latex Language Support extension along with the VS Code PDF for the highlighting and view pdf within VS Code Editor. However, there are more better options like Latex Workshop are available. They provide more better features, though I wish to stick with the simpler and straight forward options.</p>"},{"location":"04_git/","title":"Setting up Git and Github","text":""},{"location":"04_git/#git-installation","title":"Git Installation","text":"<ul> <li>In Debian based systems, install git by the command <code>sudo apt install git</code>.</li> <li>Usually, most of the Linux systems comes with git pre-installed.</li> <li>In windows, download the installer from (https://gitforwindows.org/). Run it with administrator privileges. Accept the default values and choose Windows Command Prompt for accessing git.</li> <li>Verify the installation by <code>git --version</code> in terminal/Command Prompt</li> <li>Once you installed <code>git</code> define global username and mail ID from terminal or command prompt.</li> </ul> <pre><code>$ git config --global user.name \"Your Name\"   \n$ git config --global user.email \"your@mail.id\"\n</code></pre>"},{"location":"04_git/#github-account-and-gh-cli","title":"Github Account and <code>gh-cli</code>","text":"<ul> <li>the account registration with github.com is straightforward</li> <li>for safety it is recommended to use <code>github-cli</code>. You can download the binaries from here: https://cli.github.com/</li> <li>it can be used without <code>github-cli</code> however the process is time consuming and you have to create tokens and save it locally in your machine.</li> <li>once it is installed authenticate it using <code>gh auth login</code></li> <li>once you authenticated through the browser you can access your github repositories from terminal without need to use browser or app</li> </ul>"},{"location":"05_intit_project/","title":"Setting up your manuscript repository","text":"<p>Go to your preferred folder, where you're planning to keep your manuscript file. Now, follow these steps:</p>"},{"location":"05_intit_project/#creating-and-cloning-repo","title":"Creating and cloning repo","text":"<ul> <li>Create a github repo by <code>gh repo create username/repo-name --private</code> here the <code>username</code> is your github user name and <code>repo-name</code> is the name you want to give your repo. <code>--private</code> tag ensures that the repo can be accessed only by you or by the persons who you invite.</li> <li>then clone the repo to your local machine by <code>gh repo clone username/repo-name</code></li> <li>you may get a warning that you cloned an empty directory - you can safely ignore it, because hereafter only you're going to add the files</li> </ul>"},{"location":"05_intit_project/#creating-the-tex-file","title":"Creating the <code>.tex</code> file","text":"<ul> <li>now open VS Code and the File &gt; Open Folder ... Navigate to the <code>repo-name</code> and open it</li> <li>In the <code>Explorer</code> tab, click the <code>New File</code> icon and create a file <code>manuscript.tex</code></li> <li>Double click the file to open on the right side editor</li> <li>this is our manuscript file and here is we are going to write our manuscript</li> </ul>"},{"location":"05_intit_project/#adding-dummy-text-and-sync-with-github","title":"Adding dummy text and sync with github","text":"<ul> <li>to learn sync with github, add a dummy text to the file for example:</li> </ul> <pre><code>aaaaaaaaaaaaaaaaaaaaaaa\n</code></pre> <ul> <li>save it</li> <li>now you can see a number badge on the left panel, source control</li> <li>click that icon, you could see a message box, followed by commit button and a list of changes</li> <li>in the message box type a readable message like <code>files initiated</code> and click commit</li> <li>the message is crucial, because if you want to switch back to particular version later you can directly read the commit message and switch to it. If you use same message for different commits it would be hard to locate you version of interest</li> <li>now click the <code>Sync</code> option to sync with github account. if you open your github repository in the browser you should see the updated file.</li> </ul>"},{"location":"05_intit_project/#alternate-ways-to-sync","title":"Alternate ways to sync","text":"<ul> <li>even without VS Code, you can commit and sync with github (however gh-cli is essential to clone and push)</li> <li>to do that, first add the files to git tracking by <code>git add .</code> this will add all the files</li> <li>then commit it by <code>git commit -m 'files initiated</code></li> <li>finally, sync to github by <code>git push origin main</code> or simply <code>git push</code> </li> </ul>"},{"location":"05_intit_project/#add-only-selected-files","title":"Add only selected files","text":"<ul> <li>when compiling the tex file it would produce log files and auxilary files. which you often no required to sync with the cloud.</li> <li>you can safely ignore these files by creating a <code>.gitignore</code> file.</li> <li>click add a new file and name it as <code>.gitignore</code> - note the <code>.</code> prior to the name</li> <li>open the file and add the extension of files you wish to exclude from sync</li> </ul> <pre><code># the following files has to be ignored\n\n.log\n.aux\n</code></pre> <ul> <li>save and sync</li> </ul>"},{"location":"05_intit_project/#note","title":"Note","text":"<ul> <li>you can first create a file and folder, than it can also be added to github</li> <li>for that make sure you have git and github-cli -- create a repository using <code>gh</code></li> <li>then in your local folder, initiate git by <code>git init</code></li> <li>then follow add and commit the files</li> <li>now, add your local directory to the github by <code>git remote add origin REMOTE-URL</code></li> <li>check it is properly configured by <code>git remote -v</code></li> <li>then sync by the command <code>git push</code> or <code>git push origin main</code></li> </ul>"},{"location":"06_structure/","title":"Manuscript Structure","text":"<p>Usually a Latex manuscript contains three parts: (a) preamble (b) sections and (c) references.</p>"},{"location":"06_structure/#preamble","title":"Preamble","text":"<p>Preamble can be further divided into two parts (a) formatting part (b) details part. Formatting part carries the style file details, margins, paper sizes kind details. The details part contains manuscript specific information such as title, author and their address.</p> <p>Lets start with a very simple format. This is the official template from ACS. It preamble looks like this:</p> <pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath}\n\\usepackage{graphicx}\n\n\\title{Getting started}\n\\author{Type Your Name}\n\\date{\\today}\n\n\\begin{document}\n\\maketitle\n\n\\end{document}\n</code></pre> <pre><code>\\documentclass[journal=jacsat,manuscript=article]{achemso}\n\\usepackage[version=3]{mhchem} % Formula subscripts using \\ce{}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{graphicx}\n\\usepackage[symbolgreek]{mathastext}\n\\usepackage{xcolor}\n\\usepackage[parfill]{parskip}\n\\usepackage{booktabs}\n\\usepackage{multirow}\n\\usepackage{longtable}\n\\usepackage{lineno}\n\\usepackage{subcaption}\n\\linenumbers\n\\newcommand*\\mycommand[1]{\\texttt{\\emph{#1}}}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\author{Author 1 Name}\n\\email{author1@email.address}\n\\affiliation[Address1_ID]\n{Add actual address, separated by comas and text}\n\n\\author{Author 2 Name}\n\\email{author2@email.address}\n\\affiliation[Address2_ID]\n{Add actual address, separated by comas and text}\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\title[ ]\n  {Add a suitable title here}\n\n\\keywords{keyword 1, keyword 2, etc.}\n</code></pre> <ul> <li>this is ACS specific template, however in most cases you can simply submit with this template and can be edited by journal office at the proofing stage or you can simply replace preamble matching journal template</li> </ul> <p>[ToDo] Explain things here</p>"},{"location":"07_sections/","title":"Manuscript Sections","text":"<p>Followed by preamble the document section begins. The general template is as follows:</p> <pre><code>\\begin{document}\n\n\n\\end{document}\n</code></pre> <p>Inside this, abstract, sections, figures and tables has to be nested. Like,</p> <pre><code>\\begin{document}\n\n    \\begin{abstract}\n    Some text goes here.\n    \\end{abstract}\n\n    \\section{Introduction}\n    Some text goes here.\n\n    \\section{Results and Discussion}\n    Some text goes here.\n\n        \\begin{figure}\n        Figure Details Here\n        \\end{figure}\n\n        \\begin{table}\n        Table Details Here\n        \\end{table}\n\n    ...\n\n\n\\end{document}\n</code></pre> <ul> <li>though mentioned seprately (will be discussed seprately) the references should also be nested in the documents part, prior to <code>\\end{document}</code> as:</li> </ul> <pre><code>...\n\n\\bibliography{ref}\n\\end{document}\n</code></pre>"},{"location":"07_sections/#special-sections","title":"Special Sections","text":"<p>Usually </p>"},{"location":"08_figures/","title":"Figures and Tables","text":"<pre><code>  \\begin{figure}[htb!]\n    \\includegraphics[width=\\textwidth]{fig/HRE}\n    \\caption{HR and RE plots of (a) \\textbf{MBTPBA} (b) \\textbf{TDBTA} and (c) \\textbf{BPTBT}.}\n    \\label{fgr:5}\n  \\end{figure}\n</code></pre> <pre><code>\\begin{table}[]\n    \\begin{tabular}{@{}lllllll@{}}\n    \\toprule\n    \\multirow{2}{*}{System} &amp; \\multicolumn{2}{c}{Fluorescence}     &amp; \\multicolumn{2}{c}{Phosphorescence}    &amp; \\multicolumn{2}{c}{ISC}    \\\\ \\cmidrule(l){2-7} \n      &amp; Rate ($\\times 10^8 s^{-1}$) &amp; HT (\\%)   &amp; Rate (s$^{-1}$) &amp; HT  (\\%)  &amp; Rate ($\\times 10^6 s^{-1}$) &amp; HT  (\\%)  \\\\ \\midrule\n    MBTPBA &amp; 21.60  &amp; 99.35 &amp; 21.7   &amp; 84.99 &amp; 1.38  &amp; 87.61 \\\\\n    TDBTA  &amp; 0.08   &amp; 99.52 &amp; 12.7   &amp; 100   &amp; 0.17  &amp; 100   \\\\\n    BPTBT  &amp; 4.81   &amp; 7.33  &amp; 9.76   &amp; 93.98 &amp; 672   &amp; 100   \\\\ \\bottomrule\n    \\end{tabular}\n\\label{tab:}   \n\\caption{Calcualted rate constants and HT contribution to that in thienylboranes.}\n\\end{table}\n</code></pre>"},{"location":"09_math/","title":"Equations","text":"<pre><code>\\begin{equation}\n\\sigma_{abs} = \\frac{e^2 \\lambda^2}{4 \\epsilon_0 m_e c_0^2 n} g(\\lambda) f_{osc}^{s_0 \\to s_1}\n\\end{equation}\n</code></pre>"},{"location":"10_references/","title":"Bibliography","text":"<ul> <li>bib file</li> </ul>"},{"location":"11_others/","title":"Others","text":"<ul> <li>footnotes</li> </ul>"},{"location":"12_branches/","title":"Co-editing and Git branches","text":""},{"location":"13_corrections/","title":"Corrections","text":""},{"location":"14_archiving/","title":"Archiving","text":"<ul> <li>zenodo</li> </ul>"}]}